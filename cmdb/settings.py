"""
Django settings for cmdb project.

这是一个Django CMDB（配置管理数据库）项目的配置文件。
CMDB系统用于管理IT资产，包括服务器硬件信息、系统配置等。
Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# 构建项目根路径
# __file__ 指向当前文件 (settings.py)
# .resolve() 获取绝对路径
# .parent 获取父目录 (cmdb/)
# .parent 再次获取父目录 (项目根目录)
BASE_DIR = Path(__file__).resolve().parent.parent


# 快速开发配置 - 不适合生产环境
# 生产环境部署前请参考: https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# 安全警告：生产环境必须保护密钥！
# SECRET_KEY用于加密签名，是Django安全机制的核心
SECRET_KEY = 'django-insecure-n@)rjqmsqu+t&xmva-)9mb5zy)79b4g83*fxwwnf)7_ey4ekd='

# 安全警告：生产环境请关闭调试模式！
# DEBUG=True 会显示详细错误信息，仅开发环境使用
DEBUG = True

# 允许的主机列表
# '*' 表示允许所有主机访问，生产环境应该指定具体域名
ALLOWED_HOSTS = ['*']


# Django应用定义
# 定义项目中启用的所有应用，包括Django内置应用和自定义应用
INSTALLED_APPS = [
    # Django内置应用
    'django.contrib.admin',         # 管理后台
    'django.contrib.auth',          # 用户认证系统
    'django.contrib.contenttypes',  # 内容类型框架
    'django.contrib.sessions',      # 会话框架
    'django.contrib.messages',      # 消息框架
    'django.contrib.staticfiles',   # 静态文件处理

    # 第三方应用
    'rest_framework',              # Django REST Framework API框架

    # 自定义应用
    'assets',                      # 资产管理核心应用
]

# 中间件配置
# 中间件是处理请求和响应的钩子，按顺序执行
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',        # 安全中间件
    'django.contrib.sessions.middleware.SessionMiddleware',  # 会话中间件
    'django.middleware.common.CommonMiddleware',            # 通用中间件
    'django.middleware.csrf.CsrfViewMiddleware',           # CSRF保护中间件
    'django.contrib.auth.middleware.AuthenticationMiddleware', # 认证中间件
    'django.contrib.messages.middleware.MessageMiddleware',  # 消息中间件
    'django.middleware.clickjacking.XFrameOptionsMiddleware', # 点击劫持保护
]

# 根URL配置模块
# 指向项目的主URL配置文件
ROOT_URLCONF = 'cmdb.urls'

# 模板配置
# 定义Django如何查找和渲染HTML模板
TEMPLATES = [
    {
        # 模板引擎后端
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 模板目录列表，除了应用内的templates目录外，还会在这些目录中查找模板
        'DIRS': [BASE_DIR / 'templates'],
        # 是否在应用的templates目录中查找模板
        'APP_DIRS': True,
        # 模板引擎选项
        'OPTIONS': {
            # 上下文处理器，在模板渲染时添加全局变量
            'context_processors': [
                'django.template.context_processors.debug',    # 调试信息
                'django.template.context_processors.request',  # 请求对象
                'django.contrib.auth.context_processors.auth', # 用户认证信息
                'django.contrib.messages.context_processors.messages', # 消息
            ],
        },
    },
]

# WSGI应用配置
# 用于部署到生产环境的Web服务器网关接口
WSGI_APPLICATION = 'cmdb.wsgi.application'


# 数据库配置
# Django支持多种数据库：SQLite, PostgreSQL, MySQL, Oracle等
# SQLite适合开发和小型项目，数据存储在单个文件中
# 参考: https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    'default': {
        # 数据库引擎：SQLite3
        'ENGINE': 'django.db.backends.sqlite3',
        # 数据库文件路径：项目根目录下的db.sqlite3文件
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# 密码验证配置
# Django提供多种密码验证器来确保用户密码的安全性
# 参考: https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        # 用户属性相似性验证：防止密码与用户信息过于相似
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # 最小长度验证：确保密码达到最小长度要求
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # 常用密码验证：防止使用常见密码
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # 数字密码验证：防止密码全为数字
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# 国际化配置
# 支持多语言和时区设置
# 参考: https://docs.djangoproject.com/en/4.2/topics/i18n/
LANGUAGE_CODE = 'zh-hans'    # 语言代码：简体中文

TIME_ZONE = 'Asia/Shanghai'  # 时区：北京时间

USE_I18N = True             # 启用国际化支持

USE_TZ = True               # 启用时区支持（推荐）


# 静态文件配置 (CSS, JavaScript, Images)
# 静态文件是CSS、JavaScript、图片等不需要Django处理的文件
# 参考: https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = 'static/'                       # 静态文件URL前缀
STATICFILES_DIRS = [BASE_DIR / 'static']    # 额外的静态文件目录

# 默认主键字段类型
# Django 3.2+ 默认使用 BigAutoField，支持更大的ID范围
# 参考: https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
