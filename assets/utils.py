"""
工具函数模块：SSH连接和Agent部署

这个模块包含了CMDB系统的核心工具函数，主要负责：
1. SSH连接管理和测试
2. Agent自动部署到目标服务器
3. 定时任务（Cron）的生成和更新
4. 网络工具函数

使用的技术栈：
- paramiko: Python SSH库，用于远程连接和命令执行
- contextlib: 上下文管理器，确保资源正确释放
- socket: 网络套接字编程，用于获取本机IP

安全考虑：
- SSH密码通过Base64编码存储（非加密，仅基础保护）
- 使用contextmanager确保SSH连接正确关闭
- 设置合理的连接超时时间
- 异常处理避免敏感信息泄露
"""
import os
import socket
import paramiko
from contextlib import contextmanager
from django.conf import settings
from django.utils import timezone


def get_local_ip():
    """
    获取本机IP地址

    用于生成Agent脚本中的CMDB服务器URL。
    通过连接外部服务器（8.8.8.8）来获取本机的网络接口IP，
    而不是返回127.0.0.1。

    工作原理：
    1. 创建UDP套接字
    2. 连接到外部地址（8.8.8.8:80，Google DNS）
    3. 获取套接字的本地地址
    4. 关闭套接字并返回IP

    Returns:
        str: 本机的网络IP地址，如果获取失败则返回'127.0.0.1'

    使用场景：
        - 生成Agent脚本中的CMDB服务器URL
        - SSH连接测试时作为服务器地址

    注意事项：
        - 不实际发送数据，仅用于获取本地接口信息
        - 8.8.8.8是公共DNS服务器，连接稳定可靠
        - 如果网络异常，返回本地回环地址作为fallback
    """
    try:
        # 创建UDP套接字（UDP无需建立完整连接）
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

        # 连接到Google DNS服务器（仅用于获取本地接口地址）
        # 这里不会实际发送数据，只是设置套接字的本地接口
        s.connect(('8.8.8.8', 80))

        # 获取套接字绑定的本地IP地址
        ip = s.getsockname()[0]

        # 关闭套接字
        s.close()
        return ip

    except Exception:
        # 如果获取失败（如网络异常），返回本地回环地址
        return '127.0.0.1'


def generate_cron_content(cron_expression, cmdb_server_url, comment="Auto-generated by CMDB System"):
    """
    生成Cron定时任务文件内容

    创建用于定时执行Agent的Cron配置文件内容。
    采用远程执行模式，通过curl下载脚本并通过管道执行。

    Cron格式说明：
        分 时 日 月 周 用户 命令
        例如：0 * * * * 表示每小时的第0分钟执行

    执行流程：
        1. curl下载Agent脚本
        2. 通过管道传递给python3执行
        3. 输出重定向到日志文件
        4. 错误输出也重定向到日志文件

    Args:
        cron_expression (str): Cron表达式，如"0 * * * *"
        cmdb_server_url (str): CMDB服务器的基础URL
        comment (str, optional): Cron文件的注释说明

    Returns:
        str: 完整的Cron文件内容，可直接写入/etc/cron.d/

    生成的文件示例：
        # CMDB Agent Cron Job
        # Auto-generated by CMDB System
        # Updated: 2024-01-01 12:00:00

        0 * * * * root curl -s http://192.168.1.100:8000/api/agent/script/ | python3 - --server http://192.168.1.100:8000 >> /var/log/cmdb_agent.log 2>&1

    注意事项：
        - 使用curl的-s参数静默下载
        - 日志文件路径：/var/log/cmdb_agent.log
        - 需要root权限执行（用于硬件信息采集）
    """
    # 生成包含时间戳的注释头
    timestamp = timezone.now().strftime('%Y-%m-%d %H:%M:%S')

    return f"""# CMDB Agent Cron Job
# {comment}
# Updated: {timestamp}

{cron_expression} root curl -s {cmdb_server_url}/api/agent/script/ | python3 - --server {cmdb_server_url} >> /var/log/cmdb_agent.log 2>&1
"""


@contextmanager
def ssh_connection(server, timeout=30):
    """
    SSH连接上下文管理器

    这是一个安全的SSH连接管理器，使用Python的contextmanager装饰器实现。
    确保SSH连接在使用完毕后正确关闭，避免资源泄露。

    工作流程：
    1. 创建SSH客户端对象
    2. 设置主机密钥策略（自动接受新主机）
    3. 建立SSH连接
    4. yield SSH客户端对象供使用
    5. 在finally块中关闭连接

    Args:
        server (Server): Server模型实例，包含连接信息
        timeout (int, optional): 连接超时时间（秒），默认30秒

    Yields:
        paramiko.SSHClient: 已连接的SSH客户端对象

    使用示例：
        with ssh_connection(server) as ssh:
            stdin, stdout, stderr = ssh.exec_command('ls -la')
            result = stdout.read().decode()

    安全考虑：
        - AutoAddPolicy会自动接受新主机密钥，生产环境应考虑更安全的策略
        - 密码从Server模型中获取并自动解码
        - 确保连接在异常情况下也能正确关闭

    异常处理：
        - 连接失败会抛出paramiko相关异常
        - 调用方负责处理具体的异常类型
    """
    # 创建SSH客户端对象
    ssh = paramiko.SSHClient()

    # 设置主机密钥策略
    # AutoAddPolicy自动接受新主机密钥，适合开发环境
    # 生产环境应考虑使用更安全的策略，如LoadKnownHostsKeys
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        # 建立SSH连接
        ssh.connect(
            hostname=server.management_ip,      # 服务器IP地址
            port=server.ssh_port,                # SSH端口
            username=server.ssh_username,        # SSH用户名
            password=server.get_ssh_password(),  # 解码后的SSH密码
            timeout=timeout                      # 连接超时时间
        )

        # yield关键字将SSH客户端对象传递给with代码块
        yield ssh

    finally:
        # 无论是否发生异常，都确保关闭SSH连接
        ssh.close()


def deploy_agent_to_server(server):
    """
    通过SSH部署Agent到目标服务器

    这是CMDB系统的核心部署功能，自动在目标服务器上配置和部署数据采集Agent。
    采用远程执行模式，无需在目标服务器上预先存放文件。

    部署流程：
    1. 建立SSH连接
    2. 检查目标服务器环境（Python3、curl）
    3. 生成Cron配置文件
    4. 写入定时任务配置
    5. 立即执行一次数据采集
    6. 更新服务器状态

    远程执行模式的优势：
    - 无需文件传输，减少网络开销
    - 始终使用最新版本的Agent脚本
    - 便于集中管理和更新

    Args:
        server (Server): 要部署Agent的服务器对象

    Returns:
        tuple[bool, str]: (是否成功, 消息内容)

            成功示例： (True, 'Agent部署成功（远程执行模式）')
            失败示例： (False, 'Python3未安装，请先安装Python3')

    环境要求：
        - Python 3.x
        - curl命令
        - sudo权限（用于写入cron文件）
        - 网络连接到CMDB服务器

    异常处理：
        - 认证失败：用户名密码错误
        - SSH连接错误：网络问题或服务异常
        - 环境检查失败：缺少必要软件
        - 权限不足：无法写入系统文件
    """
    try:
        # 使用上下文管理器建立SSH连接
        with ssh_connection(server) as ssh:
            # ==================== 环境检查阶段 ====================

            # 1. 检查Python3环境
            # Agent需要Python3环境运行
            stdin, stdout, stderr = ssh.exec_command('which python3')
            python3_path = stdout.read().decode().strip()
            if not python3_path:
                return False, 'Python3未安装，请先安装Python3'

            # 2. 检查curl命令
            # curl用于从CMDB服务器下载Agent脚本
            stdin, stdout, stderr = ssh.exec_command('which curl')
            curl_path = stdout.read().decode().strip()
            if not curl_path:
                return False, 'curl未安装，请先安装curl'

            # ==================== 配置生成阶段 ====================

            # 3. 获取系统配置并生成cron内容
            from .models import SystemConfig  # 避免循环导入
            config = SystemConfig.get_config()

            # 构建CMDB服务器URL
            cmdb_server_url = f"http://{get_local_ip()}:8000"

            # 生成cron任务配置内容
            cron_content = generate_cron_content(
                config.cron_expression,                    # 从系统配置获取cron表达式
                cmdb_server_url,                           # CMDB服务器地址
                "Reports hardware info using remote script execution"
            )

            # ==================== 文件部署阶段 ====================

            # 4. 写入cron配置文件
            # 使用sudo tee命令确保有权限写入系统目录
            # /etc/cron.d/目录用于存放应用程序的cron任务
            cron_command = f'echo "{cron_content}" | sudo tee /etc/cron.d/cmdb_agent > /dev/null'
            stdin, stdout, stderr = ssh.exec_command(cron_command)

            # 等待命令执行完成
            stdout.read()

            # 设置cron文件权限（644：所有者读写，组和其他用户只读）
            ssh.exec_command('sudo chmod 644 /etc/cron.d/cmdb_agent')

            # ==================== 立即执行阶段 ====================

            # 5. 立即执行一次数据采集，验证部署是否成功
            # 这样可以立即看到效果，无需等待下次定时执行
            immediate_exec_command = (
                f'curl -s {cmdb_server_url}/api/agent/script/ | '
                f'python3 - --server {cmdb_server_url}'
            )
            ssh.exec_command(immediate_exec_command)

        # ==================== 状态更新阶段 ====================

        # 6. 更新服务器状态，标记Agent已部署
        server.agent_deployed = True
        server.agent_version = '2.0'  # 标记Agent版本
        server.save()

        return True, 'Agent部署成功（远程执行模式）'

    # ==================== 异常处理 ====================

    except paramiko.AuthenticationException:
        # SSH认证失败，通常是用户名或密码错误
        return False, 'SSH认证失败，请检查用户名和密码'

    except paramiko.SSHException as e:
        # SSH连接相关错误，可能是网络问题或SSH服务异常
        return False, f'SSH连接错误: {str(e)}'

    except Exception as e:
        # 其他未预期的异常
        return False, f'部署失败: {str(e)}'


def update_server_cron(server, cron_expression):
    """
    更新单台服务器的Cron定时任务

    用于批量更新所有服务器的定时任务频率，例如从每小时改为每30分钟。
    只更新cron表达式，不重新部署整个Agent。

    更新流程：
    1. 建立SSH连接
    2. 生成新的cron配置内容
    3. 更新/etc/cron.d/cmdb_agent文件
    4. 设置正确的文件权限

    Args:
        server (Server): 要更新的服务器对象
        cron_expression (str): 新的Cron表达式

    Returns:
        bool: 更新成功返回True，失败返回False

    使用场景：
        - 系统管理员调整数据采集频率
        - 临时更改采集计划
        - 批量更新所有服务器的定时任务

    注意事项：
        - 使用较短的超时时间（10秒），因为只是简单的文件操作
        - 不更新Agent版本，只修改执行频率
        - 异常时返回False，不抛出异常（便于批量处理）
    """
    try:
        # 使用较短的超时时间，因为只是文件操作
        with ssh_connection(server, timeout=10) as ssh:
            # 构建CMDB服务器URL
            cmdb_server_url = f"http://{get_local_ip()}:8000"

            # 生成新的cron配置内容
            cron_content = generate_cron_content(cron_expression, cmdb_server_url)

            # 更新cron配置文件
            # 使用echo和sudo tee命令覆盖原有文件
            cron_command = f'echo "{cron_content}" | sudo tee /etc/cron.d/cmdb_agent > /dev/null'
            stdin, stdout, stderr = ssh.exec_command(cron_command)

            # 等待命令执行完成
            stdout.read()

            # 重新设置文件权限，确保cron服务能正常读取
            ssh.exec_command('sudo chmod 644 /etc/cron.d/cmdb_agent')

        return True

    except Exception:
        # 任何异常都返回False，不向上抛出异常
        # 这样便于批量处理时统计成功和失败的数量
        return False


def test_ssh_connection(ip, port, username, password):
    """
    测试SSH连接的可用性

    在添加新服务器之前验证SSH连接配置是否正确。
    这是一个独立的测试函数，不依赖Server模型。

    测试流程：
    1. 创建SSH客户端
    2. 尝试连接到目标服务器
    3. 立即关闭连接（只测试连通性）
    4. 返回测试结果

    Args:
        ip (str): 目标服务器的IP地址
        port (int): SSH服务端口
        username (str): SSH登录用户名
        password (str): SSH登录密码

    Returns:
        tuple[bool, str]: (连接是否成功, 详细消息)

            成功示例： (True, 'SSH连接测试成功')
            失败示例： (False, 'SSH认证失败')
            失败示例： (False, 'SSH连接错误: Connection timed out')

    使用场景：
        - 添加服务器前的连接验证
        - 服务器网络故障排查
        - SSH配置变更后的测试

    异常类型说明：
        - AuthenticationException: 认证失败（用户名密码错误）
        - SSHException: SSH协议相关错误
        - 其他异常: 网络连接问题等

    注意事项：
        - 使用较短的超时时间（10秒）
        - 测试完成后立即关闭连接
        - 不执行任何命令，仅测试连接能力
    """
    # 创建SSH客户端对象
    ssh = paramiko.SSHClient()

    # 设置主机密钥策略
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        # 尝试建立SSH连接
        ssh.connect(
            hostname=ip,           # 目标IP地址
            port=port,             # SSH端口
            username=username,     # SSH用户名
            password=password,     # SSH密码
            timeout=10             # 连接超时时间
        )

        # 立即关闭连接（只测试连通性）
        ssh.close()

        return True, 'SSH连接测试成功'

    except paramiko.AuthenticationException:
        # SSH认证失败，通常是用户名或密码错误
        return False, 'SSH认证失败'

    except paramiko.SSHException as e:
        # SSH协议相关错误，可能是版本不兼容或配置问题
        return False, f'SSH连接错误: {str(e)}'

    except Exception as e:
        # 其他网络或系统异常
        return False, f'连接失败: {str(e)}'
