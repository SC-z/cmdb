"""
工具函数模块：SSH连接和Agent部署
"""
import os
import socket
import paramiko
from contextlib import contextmanager
from django.conf import settings
from django.utils import timezone


def get_local_ip():
    """获取本机IP地址"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(('8.8.8.8', 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception:
        return '127.0.0.1'


def generate_cron_content(cron_expression, cmdb_server_url, comment="Auto-generated by CMDB System"):
    """
    生成cron任务文件内容

    Args:
        cron_expression: Cron表达式 (如: "0 * * * *")
        cmdb_server_url: CMDB服务器地址
        comment: 注释说明

    Returns:
        str: cron文件内容
    """
    return f"""# CMDB Agent Cron Job
# {comment}
# Updated: {timezone.now().strftime('%Y-%m-%d %H:%M:%S')}

{cron_expression} root curl -s {cmdb_server_url}/api/agent/script/ | python3 - --server {cmdb_server_url} >> /var/log/cmdb_agent.log 2>&1
"""


@contextmanager
def ssh_connection(server, timeout=30):
    """
    SSH连接上下文管理器

    Args:
        server: Server模型实例
        timeout: 连接超时时间

    Yields:
        paramiko.SSHClient: SSH客户端对象
    """
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        ssh.connect(
            hostname=server.management_ip,
            port=server.ssh_port,
            username=server.ssh_username,
            password=server.get_ssh_password(),
            timeout=timeout
        )
        yield ssh
    finally:
        ssh.close()


def deploy_agent_to_server(server):
    """
    通过SSH部署Agent到目标服务器（curl远程执行模式）

    Args:
        server: Server模型实例

    Returns:
        tuple: (success: bool, message: str)
    """
    try:
        with ssh_connection(server) as ssh:
            # 1. 检查Python3环境
            stdin, stdout, stderr = ssh.exec_command('which python3')
            if not stdout.read().decode().strip():
                return False, 'Python3未安装，请先安装Python3'

            # 2. 检查curl命令
            stdin, stdout, stderr = ssh.exec_command('which curl')
            if not stdout.read().decode().strip():
                return False, 'curl未安装，请先安装curl'

            # 3. 获取系统配置并生成cron内容
            from .models import SystemConfig
            config = SystemConfig.get_config()
            cmdb_server_url = f"http://{get_local_ip()}:8000"
            cron_content = generate_cron_content(
                config.cron_expression,
                cmdb_server_url,
                "Reports hardware info using remote script execution"
            )

            # 4. 写入cron文件
            stdin, stdout, stderr = ssh.exec_command(
                f'echo "{cron_content}" | sudo tee /etc/cron.d/cmdb_agent > /dev/null'
            )
            stdout.read()  # 等待命令完成

            # 设置文件权限
            ssh.exec_command('sudo chmod 644 /etc/cron.d/cmdb_agent')

            # 5. 立即执行一次采集
            ssh.exec_command(
                f'curl -s {cmdb_server_url}/api/agent/script/ | python3 - --server {cmdb_server_url}'
            )

        # 更新服务器状态
        server.agent_deployed = True
        server.agent_version = '2.0'
        server.save()

        return True, 'Agent部署成功（远程执行模式）'

    except paramiko.AuthenticationException:
        return False, 'SSH认证失败，请检查用户名和密码'
    except paramiko.SSHException as e:
        return False, f'SSH连接错误: {str(e)}'
    except Exception as e:
        return False, f'部署失败: {str(e)}'


def update_server_cron(server, cron_expression):
    """
    更新单台服务器的cron任务

    Args:
        server: Server模型实例
        cron_expression: Cron表达式

    Returns:
        bool: 成功返回True，失败返回False
    """
    try:
        with ssh_connection(server, timeout=10) as ssh:
            cmdb_server_url = f"http://{get_local_ip()}:8000"
            cron_content = generate_cron_content(cron_expression, cmdb_server_url)

            # 写入cron文件
            stdin, stdout, stderr = ssh.exec_command(
                f'echo "{cron_content}" | sudo tee /etc/cron.d/cmdb_agent > /dev/null'
            )
            stdout.read()

            # 设置文件权限
            ssh.exec_command('sudo chmod 644 /etc/cron.d/cmdb_agent')

        return True
    except Exception:
        return False


def test_ssh_connection(ip, port, username, password):
    """
    测试SSH连接

    Args:
        ip: IP地址
        port: SSH端口
        username: SSH用户名
        password: SSH密码

    Returns:
        tuple: (success: bool, message: str)
    """
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        ssh.connect(
            hostname=ip,
            port=port,
            username=username,
            password=password,
            timeout=10
        )
        ssh.close()
        return True, 'SSH连接测试成功'

    except paramiko.AuthenticationException:
        return False, 'SSH认证失败'
    except paramiko.SSHException as e:
        return False, f'SSH连接错误: {str(e)}'
    except Exception as e:
        return False, f'连接失败: {str(e)}'
